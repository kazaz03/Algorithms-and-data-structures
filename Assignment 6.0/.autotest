{
    "id": 1721,
    "name": "Algoritmi i strukture podataka (2016\/2017), Pripremna Zadaca Za Vjezbu 8, zadatak 1",
    "languages": [
        "C++"
    ],
    "tools": {
        "compile": {
            "require": "g++",
            "features": [
                "optimize",
                "warn",
                "pedantic",
                "C++11"
            ]
        },
        "compile[debug]": {
            "require": "g++",
            "features": [
                "debug",
                "C++11"
            ]
        },
        "execute": {
            "environment": {
                "timeout": 10,
                "memory": 1000000
            }
        },
        "debug": [],
        "profile[memcheck]": {
            "require": "valgrind",
            "features": [
                "memcheck"
            ],
            "environment": {
                "timeout": 10
            }
        },
        "profile[sgcheck]": {
            "require": "valgrind",
            "features": [
                "sgcheck"
            ],
            "environment": {
                "timeout": 10
            }
        }
    },
    "tests": [
        {
            "compile": [],
            "options": [
                "silent",
                "terminate"
            ]
        },
        {
            "id": 1722,
            "patch": [
                {
                    "position": "main",
                    "code": "\/\/ Osnovni test funkcionalnosti BinStabloMapa\nBinStabloMapa<std::string,std::string> m;\nm[\"Sarajevo\"] = \"BiH\";\nm[\"Zagreb\"] = \"Hrvatska\";\ncout << m.brojElemenata() << \" \" << m[\"Zagreb\"] << \" '\"; \/\/ 2 Hrvatska\n\n\/\/ Test praznih elemenata\ncout << m[\"Beograd\"] <<\"' '\"; \/\/ ''\ncout << m[\"zagreb\"] << \"' \"; \/\/ ''\nm.obrisi(\"Zagreb\");\n\n\/\/ Potpuno korektna BinStabloMapa nece kreirati objekte \"Beograd\" i \"zagreb\"\n\/\/ jer oni nemaju vrijednosti pa ce se ispod ispisati 1\n\/\/ Ali to zahtijeva implementaciju \"Pristupnika\" pa cemo priznavati\n\/\/ rjesenje koje ispise broj 3\ncout << m.brojElemenata(); \/\/ 3 ili 1\n\n\/\/ Test brisanja\ncout << \" '\" << m[\"Zagreb\"] << \"' \" ; \/\/ ''\nm.obrisi();\ncout << m.brojElemenata(); \/\/ 0\ncout << \" '\" << m[\"Sarajevo\"] << \"' \"; \/\/ ''",
                    "use_markers": true
                },
                {
                    "position": "above_main",
                    "code": "#include <string>",
                    "use_markers": true
                }
            ],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "2 Hrvatska '' '' 1 '' 0 ''",
                    "2 Hrvatska '' '' 3 '' 0 ''"
                ]
            },
            "debug": [],
            "profile[memcheck]": [],
            "profile[sgcheck]": []
        },
        {
            "id": 1723,
            "patch": [
                {
                    "position": "main",
                    "code": "BinStabloMapa<std::string,std::string> m;\nm[\"Sarajevo\"] = \"BiH\";\nm[\"Zagreb\"] = \"Hrvatska\";\n{\n        \/\/ Konstruktor kopije\n\tBinStabloMapa<std::string,std::string> m2(m);\n        \/\/ Operator dodjele\n\tBinStabloMapa<std::string,std::string> m3;\n\tm3[\"Kiseljak\"] = \"BiH\";\n\tcout << (m3=m).brojElemenata() << \" \"; \/\/ 2\n        \/\/ Destruktivna samododjela\n\tcout << (m=m).brojElemenata() << \" \"; \/\/ 2\n\n        \/\/ Plitka kopija\n\tm.obrisi(\"Sarajevo\");\n\tcout << m2.brojElemenata() << \" \"; \/\/ 2\n        cout << m2[\"Sarajevo\"] << \" \"; \/\/ BiH\n        cout << m3.brojElemenata() << \" \"; \/\/ 2\n        cout << m3[\"Sarajevo\"] << \" \"; \/\/ BiH\n}\ncout << m.brojElemenata(); \/\/ 1\ncout << \" '\" << m[\"Sarajevo\"] << \"' \"; \/\/ ''\nm.obrisi();\ncout << m.brojElemenata(); \/\/ 0\ncout << \" '\" << m[\"Zagreb\"] << \"'\"; \/\/ ''",
                    "use_markers": true
                },
                {
                    "position": "above_main",
                    "code": "#include <string>",
                    "use_markers": true
                }
            ],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "2 2 2 BiH 2 BiH 1 '' 0 ''"
                ]
            },
            "debug": [],
            "profile[memcheck]": [],
            "profile[sgcheck]": []
        },
        {
            "id": 1724,
            "patch": [
                {
                    "position": "main",
                    "code": "\/\/ Test rada sa tipom koji nema default konstruktor (std::vector)\nBinStabloMapa <std::string, std::vector<std::string> > m;\nstd::vector<std::string> gradovi;\ngradovi.push_back(\"Sarajevo\");\ngradovi.push_back(\"Mostar\");\ngradovi.push_back(\"Banja Luka\");\nm[\"BiH\"]=gradovi;\ncout << m[\"BiH\"].size() << \" \";\nm[\"BiH\"].push_back(\"Tuzla\");\ncout << m[\"BiH\"][0] << \" \" << m[\"BiH\"][3] << \" \" << m[\"BiH\"].size();",
                    "use_markers": true
                },
                {
                    "position": "above_main",
                    "code": "#include <string>\n#include <vector>",
                    "use_markers": true
                }
            ],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "3 Sarajevo Tuzla 4"
                ]
            },
            "debug": [],
            "profile[memcheck]": [],
            "profile[sgcheck]": []
        },
        {
            "id": 1725,
            "patch": [
                {
                    "position": "main",
                    "code": "\/\/ Const korektnost i test rada sa tipom int\nBinStabloMapa <int, int> m;\nm[100] = 200;\nconst BinStabloMapa <int, int>& m2(m);\nm[200] = 300;\ncout << m2.brojElemenata() << \" \"; \/\/ 2\ncout << m2[200] << \" \"; \/\/ 300\n\n\/\/ Ovdje se sigurno nece kreirati objekat m2[300] jer je m2 const\ncout << m2[300] << \" \"; \/\/ 0\ncout << m2.brojElemenata() << \" \"; \/\/ 2\nm[300] = 400;\ncout << m2[300] << \" \"; \/\/ 400\ncout << m2.brojElemenata(); \/\/ 3",
                    "use_markers": true
                }
            ],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "2 300 0 2 400 3"
                ]
            },
            "debug": [],
            "profile[memcheck]": [],
            "profile[sgcheck]": []
        },
        {
            "id": 1726,
            "patch": [
                {
                    "position": "main",
                    "code": "\/\/ Test performansi BinStabloMape\nBinStabloMapa <int, int> m;\nfor (int i(1000); i>-1000; i--)\n    m[i] = i*i;\ncout << m[-100];",
                    "use_markers": true
                }
            ],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "10000"
                ]
            },
            "debug": [],
            "profile[memcheck]": [],
            "profile[sgcheck]": []
        },
        {
            "id": 1727,
            "patch": [
                {
                    "position": "main",
                    "code": "\/\/ Test polimorfizma\nMapa<int,int>* m = new BinStabloMapa<int,int>;\n(*m)[100] = 200;\n(*m)[50] = 100;\ncout << (*m)[100] << \" \" << m->brojElemenata(); \/\/ 200 2\nm->obrisi(100);\ncout << \" \" << m->brojElemenata(); \/\/ 1\nm->obrisi();\ncout << \" \" << m->brojElemenata(); \/\/ 0\n(*m)[25] = 300;\ncout << \" \" << (*m)[100]; \/\/ 0\ncout << \" \" << (*m)[50]; \/\/ 0\ncout << \" \" << (*m)[25]; \/\/ 300\ndelete m;",
                    "use_markers": true
                }
            ],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "200 2 1 0 0 0 300"
                ]
            },
            "debug": [],
            "profile[memcheck]": [],
            "profile[sgcheck]": []
        },
        {
            "id": 1728,
            "patch": [
                {
                    "position": "main",
                    "code": "BinStabloMapa <float, float> m;\nm[5] = 5;\nm[3] = 3;\nm[7] = 7;\nm[8] = 8;\nm[1] = 1;\nm[2] = 2;\nm[0.5] = 0.5;\nm[4] = 4;\nm[1.5] = 1.5;\nm[3.5] = 3.5;\nm[4.5] = 4.5;\n\n\/\/ Proba\ncout << std::setprecision(2) << m[4.5] << \" \";\n\/\/ Brisanje slucaj 1\nm.obrisi(8);\ncout << m[7] << \" \" << m[8] << \" \"; \n\/\/ Ovim smo ponovo dodali kljuc 8 u mapu\n\/\/ Brisanje slucaj 2\nm[8] = 8;\nm.obrisi(7);\ncout << m[5] << \" \" << m[8] << \" \" << m[7] << \" \";\n\/\/ Brisanje slucaj 3\nm.obrisi(3);\ncout << m[2] << \" \" << m[1.5] << \" \" << m[1] << \" \";\ncout << m[0.5] << \" \" << m[3] << \" \";\n\/\/ Brisanje korijena\nm.obrisi(5);\nm[3] = 3;\ncout << m[8] << \" \" << m[1.5] << \" \" << m[3];\ncout << \" \" << m[5] << \" \";\n\/\/ Da li je roditelj korektno azuriran?\nm.obrisi(7);\ncout << m[8] << \" \" << m[7];",
                    "use_markers": true
                },
                {
                    "position": "above_main",
                    "code": "#include <iomanip>",
                    "use_markers": true
                }
            ],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "4.5 7 0 5 8 0 2 1.5 1 0.5 0 8 1.5 3 0 8 0"
                ]
            },
            "debug": [],
            "profile[memcheck]": [],
            "profile[sgcheck]": []
        },
        {
            "id": 1729,
            "patch": [
                {
                    "position": "main",
                    "code": "\/\/ Malo jaci test performansi BinStabloMape gdje se vidi \n\/\/ da li je zaista O(log n)\nBinStabloMapa <int, int> m;\nint vel(1000000);\nfor (int i(0); i<vel; i++)\n    m[rand()%(2*vel)-vel] = i;\nfor (int i(-vel); i<vel; i++)\n    m[i] = i;\nfor (int i(-vel); i<vel; i++)\n    m.obrisi(i);\ncout << \"OK\";",
                    "use_markers": true
                }
            ],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "OK"
                ]
            },
            "debug": [],
            "profile[memcheck]": [],
            "profile[sgcheck]": []
        }
    ]
}